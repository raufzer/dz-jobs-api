package controllers

import (
	"dz-jobs-api/config"
	"dz-jobs-api/data/request"
	"dz-jobs-api/data/response"
	"dz-jobs-api/internal/services"
	"dz-jobs-api/pkg/helpers"
	"net/http"

	"github.com/gin-gonic/gin"
	// Swagger imports
	// This will be generated by swag
)

// AuthenticationController godoc
// @Description Handles authentication-related operations
type AuthenticationController struct {
	AuthenticationService services.AuthenticationService
	Config                *config.AppConfig
}

// NewAuthenticationController creates a new AuthenticationController
func NewAuthenticationController(service services.AuthenticationService, config *config.AppConfig) *AuthenticationController {
	return &AuthenticationController{
		AuthenticationService: service,
		Config:                config,
	}
}

// Login godoc
// @Summary User Login
// @Description Authenticate user and generate access token
// @Tags Authentication
// @Accept json
// @Produce json
// @Param loginRequest body request.LoginRequest true "Login Credentials"
// @Success 200 {object} response.Response{data=response.LoginResponse} "Successfully logged in"
// @Failure 400 {object} response.Response "Invalid username or password"
// @Router /auth/login [post]
func (ac *AuthenticationController) Login(ctx *gin.Context) {
	// Bind the login request JSON to a struct
	loginRequest := request.LoginRequest{}
	err := ctx.ShouldBindJSON(&loginRequest)
	if err != nil {
		webResponse := response.Response{
			Code:    http.StatusBadRequest,
			Status:  "Bad Request",
			Message: "Invalid JSON format or missing fields",
		}
		ctx.JSON(http.StatusBadRequest, webResponse)
		return
	}

	// Call the Login service method
	token, err_token := ac.AuthenticationService.Login(loginRequest)
	if err_token != nil {
		// Return an error response if login fails
		webResponse := response.Response{
			Code:    http.StatusBadRequest,
			Status:  "Bad Request",
			Message: "Invalid username or password",
		}
		ctx.JSON(http.StatusBadRequest, webResponse)
		return
	}

	// Prepare the response with the token
	resp := response.LoginResponse{
		TokenType: "Bearer",
		Token:     token,
	}

	// Send the response with the token
	webResponse := response.Response{
		Code:    200,
		Status:  "Ok",
		Message: "Successfully logged in!",
		Data:    resp,
	}

	// Set the token in a cookie for the client
	ctx.SetCookie(
		"token",                              // cookie name
		token,                                // cookie value (JWT token)
		int(ac.Config.TokenMaxAge.Seconds()), // cookie expiration time (in seconds)
		"/",                                  // cookie path
		"localhost",                          // domain
		false,                                // secure flag
		true,                                 // HttpOnly flag
	)

	ctx.JSON(http.StatusOK, webResponse)
}

// Register godoc
// @Summary User Registration
// @Description Register a new user in the system
// @Tags Authentication
// @Accept json
// @Produce json
// @Param userRequest body request.CreateUsersRequest true "User Registration Details"
// @Success 200 {object} response.Response "Successfully created user"
// @Failure 400 {object} response.Response "Invalid registration details"
// @Router /auth/register [post]
func (ac *AuthenticationController) Register(ctx *gin.Context) {
	createUsersRequest := request.CreateUsersRequest{}
	err := ctx.ShouldBindJSON(&createUsersRequest)
	helpers.ErrorPanic(err)

	ac.AuthenticationService.Register(createUsersRequest)

	webResponse := response.Response{
		Code:    200,
		Status:  "Ok",
		Message: "Successfully created user!",
		Data:    nil,
	}

	ctx.JSON(http.StatusOK, webResponse)
}
