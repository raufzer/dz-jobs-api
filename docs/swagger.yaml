basePath: /v1
definitions:
  request.AddCertificationRequest:
    properties:
      certification_name:
        type: string
      expiration_date:
        type: string
      issue_date:
        type: string
      issued_by:
        type: string
    required:
    - certification_name
    - issue_date
    - issued_by
    type: object
  request.AddEducationRequest:
    properties:
      degree:
        type: string
      description:
        type: string
      end_date:
        type: string
      institution:
        type: string
      start_date:
        type: string
    required:
    - degree
    - institution
    - start_date
    type: object
  request.AddExperienceRequest:
    properties:
      company:
        type: string
      description:
        type: string
      end_date:
        type: string
      job_title:
        type: string
      start_date:
        type: string
    required:
    - company
    - job_title
    - start_date
    type: object
  request.AddPersonalInfoRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  request.AddProjectRequest:
    properties:
      category:
        type: string
      description:
        type: string
      project_link:
        type: string
      project_name:
        type: string
    required:
    - project_link
    - project_name
    type: object
  request.AddSkillRequest:
    properties:
      skill:
        type: string
    required:
    - skill
    type: object
  request.CreateRecruiterRequest:
    properties:
      company_contact:
        type: string
      company_description:
        type: string
      company_location:
        type: string
      company_name:
        type: string
      company_website:
        type: string
      social_links:
        type: string
      verified_status:
        type: boolean
    required:
    - company_contact
    - company_description
    - company_location
    - company_name
    - company_website
    - social_links
    - verified_status
    type: object
  request.CreateUsersRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      role:
        minLength: 4
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  request.EditJobRequest:
    properties:
      description:
        type: string
      location:
        type: string
      required_skills:
        type: string
      salary_range:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.PostNewJobRequest:
    properties:
      description:
        type: string
      location:
        type: string
      required_skills:
        type: string
      salary_range:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - description
    - status
    - title
    type: object
  request.ResetPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        description: ResetToken  string `json:"reset_token" binding:"required"`
        minLength: 8
        type: string
    required:
    - email
    - new_password
    type: object
  request.SendOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.UpdatePersonalInfoRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  request.UpdateRecruiterRequest:
    properties:
      company_contact:
        type: string
      company_description:
        type: string
      company_location:
        type: string
      company_name:
        maxLength: 150
        minLength: 3
        type: string
      company_website:
        type: string
      social_links:
        type: string
      verified_status:
        type: boolean
    required:
    - social_links
    type: object
  request.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      role:
        minLength: 4
        type: string
    type: object
  request.VerifyOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  response.CandidateResponse:
    properties:
      candidate_id:
        type: string
      profile_picture:
        type: string
      resume:
        type: string
    type: object
  response.CertificationResponse:
    properties:
      candidate_id:
        type: string
      certification_id:
        type: string
      certification_name:
        type: string
      expiration_date:
        type: string
      issue_date:
        type: string
      issued_by:
        type: string
    type: object
  response.CertificationsResponseData:
    properties:
      certifications:
        items:
          $ref: '#/definitions/response.CertificationResponse'
        type: array
      total:
        type: integer
    type: object
  response.EducationResponse:
    properties:
      candidate_id:
        type: string
      degree:
        type: string
      description:
        type: string
      education_id:
        type: string
      end_date:
        type: string
      institution:
        type: string
      start_date:
        type: string
    type: object
  response.EducationsResponseData:
    properties:
      educations:
        items:
          $ref: '#/definitions/response.EducationResponse'
        type: array
      total:
        type: integer
    type: object
  response.ExperienceResponse:
    properties:
      candidate_id:
        type: string
      company:
        type: string
      description:
        type: string
      end_date:
        type: string
      experience_id:
        type: string
      job_title:
        type: string
      start_date:
        type: string
    type: object
  response.ExperiencesResponseData:
    properties:
      experiences:
        items:
          $ref: '#/definitions/response.ExperienceResponse'
        type: array
      total:
        type: integer
    type: object
  response.JobResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      job_id:
        type: integer
      location:
        type: string
      recruiter_id:
        type: string
      required_skills:
        type: string
      salary_range:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  response.JobsResponseData:
    properties:
      jobs:
        items:
          $ref: '#/definitions/response.JobResponse'
        type: array
      total:
        type: integer
    type: object
  response.PersonalInfoResponse:
    properties:
      address:
        type: string
      candidate_id:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  response.PortfolioResponse:
    properties:
      candidate_id:
        type: string
      category:
        type: string
      description:
        type: string
      project_id:
        type: string
      project_link:
        type: string
      project_name:
        type: string
    type: object
  response.PortfoliosResponseData:
    properties:
      projects:
        items:
          $ref: '#/definitions/response.PortfolioResponse'
        type: array
      total:
        type: integer
    type: object
  response.RecruiterResponse:
    properties:
      company_contact:
        type: string
      company_description:
        type: string
      company_location:
        type: string
      company_logo:
        type: string
      company_name:
        type: string
      company_website:
        type: string
      recruiter_id:
        type: string
      social_links:
        type: string
      verified_status:
        type: boolean
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  response.SkillResponse:
    properties:
      candidate_id:
        type: string
      skill:
        type: string
    type: object
  response.SkillsResponseData:
    properties:
      skills:
        items:
          $ref: '#/definitions/response.SkillResponse'
        type: array
      total:
        type: integer
    type: object
  response.UserResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      name:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  response.UsersResponseData:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/response.UserResponse'
        type: array
    type: object
host: dz-jobs-api-production.up.railway.app
info:
  contact: {}
  description: This is the API documentation for the DZ Jobs portal.
  title: DZ Jobs API
  version: "1.0"
paths:
  /admin/users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UsersResponseData'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all users
      tags:
      - Admin - Users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUsersRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new user
      tags:
      - Users
  /admin/users/{user_id}:
    delete:
      description: Delete user by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete user
      tags:
      - Admin - Users
    get:
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user
      tags:
      - Admin - Users
    put:
      consumes:
      - application/json
      description: Update user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user
      tags:
      - Admin - Users
  /auth/google/connect:
    get:
      description: Connect with Google OAuth (Register or Login)
      parameters:
      - description: User role (admin, candidate, recruiter)
        in: query
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in!
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Role is missing or expired
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Google OAuth Connect
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in!
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logout user and clear cookies
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out!
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logout user
      tags:
      - Auth
  /auth/refresh-token:
    post:
      description: Refresh access token using refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully!
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateUsersRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.UserResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register user
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user's password using reset token
      parameters:
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully!
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Reset password
      tags:
      - Auth
  /auth/send-reset-otp:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email for password reset
      parameters:
      - description: Send OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully!
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP for password reset
      tags:
      - Auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP and generate reset token
      parameters:
      - description: Verify OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verify successfully!
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - Auth
  /candidates:
    delete:
      description: Delete candidate by ID
      produces:
      - application/json
      responses:
        "200":
          description: Candidate deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete candidate
      tags:
      - Candidates - Candidate
    get:
      description: Get candidate details by ID
      produces:
      - application/json
      responses:
        "200":
          description: Candidate found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.CandidateResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get candidate
      tags:
      - Candidates - Candidate
    post:
      consumes:
      - multipart/form-data
      description: Create a new candidate with profile picture and resume
      parameters:
      - description: Profile Picture
        in: formData
        name: profile_picture
        required: true
        type: file
      - description: Resume
        in: formData
        name: resume
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Candidate created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.CandidateResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new candidate
      tags:
      - Candidates - Candidate
    put:
      consumes:
      - multipart/form-data
      description: Update candidate details with profile picture and resume  by ID
      parameters:
      - description: Profile Picture
        in: formData
        name: profile_picture
        required: true
        type: file
      - description: Resume
        in: formData
        name: resume
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Candidate updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.CandidateResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update candidate
      tags:
      - Candidates - Candidate
  /candidates/bookmarks/:
    get:
      description: Retrieve a list of jobs bookmarked by a candidate by candidate
        ID
      produces:
      - application/json
      responses:
        "200":
          description: Jobs bookmarked retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobsResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get jobs bookmarked
      tags:
      - Candidates - Bookmarks
  /candidates/bookmarks/{job_id}:
    delete:
      consumes:
      - application/json
      description: Remove a job from bookmarks for a candidate by candidate ID
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Job removed successfully from bookmarks
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Remove a job from bookmarks
      tags:
      - Candidates - Bookmarks
    post:
      consumes:
      - application/json
      description: Add a job to bookmarks for a candidate by candidate ID
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Job added successfully to bookmarks
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a job to bookmarks
      tags:
      - Candidates - Bookmarks
  /candidates/certifications:
    get:
      description: Get all certifications for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Certifications retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.CertificationsResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Certifications not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get certifications
      tags:
      - Candidates - Certifications
    post:
      consumes:
      - application/json
      description: Add a new certification for a candidate by candidate ID
      parameters:
      - description: Certification request
        in: body
        name: certification
        required: true
        schema:
          $ref: '#/definitions/request.AddCertificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Certification created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.CertificationResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a new certification
      tags:
      - Candidates - Certifications
  /candidates/certifications/{certification_id}:
    delete:
      description: Delete a certification by candidate ID and certification ID
      parameters:
      - description: Certification ID
        in: path
        name: certification_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Certification deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Certification not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete certification
      tags:
      - Candidates - Certifications
  /candidates/default:
    post:
      consumes:
      - multipart/form-data
      description: Create a new candidate with default profile picture and resume
        (when user skip profile setup process)
      produces:
      - application/json
      responses:
        "201":
          description: Candidate created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.CandidateResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new candidate
      tags:
      - Candidates - Candidate
  /candidates/education:
    delete:
      description: Delete an education record by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Education deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Education not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete education record
      tags:
      - Candidates - Education
    get:
      description: Get all education records for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Education information retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.EducationsResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Education not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get education records
      tags:
      - Candidates - Education
    post:
      consumes:
      - application/json
      description: Add a new education record for a candidate by candidate ID
      parameters:
      - description: Education request
        in: body
        name: education
        required: true
        schema:
          $ref: '#/definitions/request.AddEducationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Education created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.EducationResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a new education record
      tags:
      - Candidates - Education
  /candidates/experience:
    delete:
      description: Delete an experience record by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Experience deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Experience not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete experience record
      tags:
      - Candidates - Experience
    get:
      description: Get all experience records for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Experience retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.ExperiencesResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Experience not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get experience records
      tags:
      - Candidates - Experience
    post:
      consumes:
      - application/json
      description: Add a new experience record for a candidate by candidate ID
      parameters:
      - description: Experience request
        in: body
        name: experience
        required: true
        schema:
          $ref: '#/definitions/request.AddExperienceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Experience created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.ExperienceResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a new experience record
      tags:
      - Candidates - Experience
  /candidates/personal-info:
    delete:
      description: Delete personal information for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Personal information deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Personal Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete personal information
      tags:
      - Candidates - Personal Info
    get:
      description: Get personal information for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.PersonalInfoResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Personal Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get personal information
      tags:
      - Candidates - Personal Info
    post:
      consumes:
      - application/json
      description: Add personal information for a candidate by candidate ID
      parameters:
      - description: Personal Info request
        in: body
        name: personal_info
        required: true
        schema:
          $ref: '#/definitions/request.AddPersonalInfoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.PersonalInfoResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add personal information
      tags:
      - Candidates - Personal Info
    put:
      consumes:
      - application/json
      description: Update personal information for a candidate by candidate ID
      parameters:
      - description: Personal Info request
        in: body
        name: personal_info
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePersonalInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.PersonalInfoResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Personal Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update personal information
      tags:
      - Candidates - Personal Info
  /candidates/portfolio:
    get:
      description: Get all projects for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Projects retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.PortfoliosResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Projects Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all projects (portfolio)
      tags:
      - Candidates - Portfolio
    post:
      consumes:
      - application/json
      description: Add a new project for a candidate by candidate ID
      parameters:
      - description: Project request
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/request.AddProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.PortfolioResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a new project
      tags:
      - Candidates - Portfolio
  /candidates/portfolio/{project_id}:
    delete:
      description: Delete a project by candidate ID and project ID
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Project Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete project
      tags:
      - Candidates - Portfolio
  /candidates/skills:
    get:
      description: Get all skills for a candidate by candidate ID
      produces:
      - application/json
      responses:
        "200":
          description: Skills retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.SkillsResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Skills Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get skills
      tags:
      - Candidates - Skills
    post:
      consumes:
      - application/json
      description: Add a new skill for a candidate by candidate ID
      parameters:
      - description: Skill request
        in: body
        name: Skill
        required: true
        schema:
          $ref: '#/definitions/request.AddSkillRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Skill created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.SkillResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Candidate not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a new skill
      tags:
      - Candidates - Skills
  /candidates/skills/{skill_name}:
    delete:
      description: Delete a skill by candidate ID and skill name
      parameters:
      - description: Skill name
        in: path
        name: skill_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Skill deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Skill Info not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete skill
      tags:
      - Candidates - Skills
  /jobs:
    get:
      description: Retrieve all jobs in the system
      produces:
      - application/json
      responses:
        "200":
          description: Jobs retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobsResponseData'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all jobs
      tags:
      - Jobs
  /jobs/{job_id}:
    get:
      description: Retrieve the details of a specific job by job_id
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job details found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get job details
      tags:
      - Jobs
  /jobs/search:
    get:
      consumes:
      - application/json
      description: Search for jobs using various filters
      parameters:
      - in: query
        name: keyword
        type: string
      - in: query
        name: location
        type: string
      - in: query
        name: max_salary
        type: number
      - in: query
        name: min_salary
        type: number
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: skills
        type: array
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Jobs found successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobsResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Jobs not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Search for jobs
      tags:
      - Jobs
  /recruiters:
    delete:
      description: Delete recruiter by recruiter_id
      produces:
      - application/json
      responses:
        "200":
          description: Recruiter deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Recruiter not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete recruiter
      tags:
      - Recruiters - Recruiter
    get:
      description: Get recruiter details by recruiter_id
      produces:
      - application/json
      responses:
        "200":
          description: Recruiter found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.RecruiterResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Recruiter not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get recruiter
      tags:
      - Recruiters - Recruiter
    post:
      consumes:
      - multipart/form-data
      description: Create a new recruiter with company logo
      parameters:
      - description: Company Logo
        in: formData
        name: company_logo
        required: true
        type: file
      - description: Recruiter request
        in: body
        name: recruiter
        required: true
        schema:
          $ref: '#/definitions/request.CreateRecruiterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Recruiter created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.RecruiterResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new recruiter
      tags:
      - Recruiters - Recruiter
    put:
      consumes:
      - multipart/form-data
      description: Update recruiter details with company logo by recruiter_id
      parameters:
      - description: Company Logo
        in: formData
        name: company_logo
        required: true
        type: file
      - description: Recruiter request
        in: body
        name: recruiter
        required: true
        schema:
          $ref: '#/definitions/request.UpdateRecruiterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recruiter updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.RecruiterResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Recruiter not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update recruiter
      tags:
      - Recruiters - Recruiter
  /recruiters/jobs:
    get:
      description: Retrieve a list of jobs filtered by their status (e.g., open, closed)
      parameters:
      - description: Job status (e.g., open, closed)
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Jobs retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobsResponseData'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Jobs not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get job listings by status
      tags:
      - Recruiters - Jobs
    post:
      consumes:
      - application/json
      description: 'Allows recruiters to post a new job (NOTE: salary range must be
        in this format: ''min - max DZD'')'
      parameters:
      - description: Job details
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/request.PostNewJobRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Job posted successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Post a new job
      tags:
      - Recruiters - Jobs
  /recruiters/jobs/{job_id}:
    delete:
      description: Remove a specific job from the system by its ID
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a job
      tags:
      - Recruiters - Jobs
    get:
      description: Retrieve the details of a specific job by job_id
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job details found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Jobs not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get job details
      tags:
      - Recruiters - Jobs
  /recruiters/jobs/{job_id}/deactivate:
    put:
      description: Disable a specific job by job_id
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job deactivated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Deactivate a job
      tags:
      - Recruiters - Jobs
  /recruiters/jobs/{job_id}/repost:
    put:
      description: Repost a deactivated job by job_id
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job reposted successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Repost a job
      tags:
      - Recruiters - Jobs
  /recruiters/jobs{job_id}:
    put:
      consumes:
      - application/json
      description: Update the details of a specific job by job_id
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      - description: Updated job details
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/request.EditJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Job updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                Data:
                  $ref: '#/definitions/response.JobResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Job notfound
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Edit an existing job
      tags:
      - Recruiters - Jobs
swagger: "2.0"
